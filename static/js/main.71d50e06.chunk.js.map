{"version":3,"sources":["Components/MovieRow.js","Components/TopMovieCards.js","Components/MyList.js","Components/MoviePlaceholder.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","props","movies","movie","map","pickedMovie","i","console","log","genres","genre_ids","slice","genre","Segment","Grid","celled","Row","Column","width","Image","className","src","poster_path","alt","format","release_date","title","overview","vote_average","Label","Button","value","id","circular","size","icon","onClick","addMovieToFavorites","TopMovieCards","topMovie","Group","MyList","favorites","favoriteList","fav","data","removeFavorites","bind","Divider","MoviePlaceholder","Placeholder","fluid","Header","image","Line","Paragraph","App","searchChangeHandeler","e","searchTerm","target","performSearch","a","preventDefault","currentTarget","Axios","get","then","response3","setState","state","MyListMovieLoading","removeMovieFromFavorites","filter","loading","toppMovieDataLoading","movieData","topMovieData","searchFired","findTopMovies","response","results","catch","error","response2","results2","Input","placeholder","onChange","this","stackable","columns","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iYAgGeA,EA5FE,SAACC,GACd,IAAMC,EAASD,EAAME,MAAMC,KAAI,SAACC,EAAaC,GACzCC,QAAQC,IAAIP,EAAME,OAElB,IAAMM,EAASJ,EAAYK,UAAUC,MAAM,EAAG,GAAGP,KAAI,SAACQ,EAAON,GACzD,OAAa,KAAVM,EACS,WACQ,KAAVA,EACC,cACS,KAAVA,EACC,cACS,KAAVA,EACC,WACS,KAAVA,EACC,UACS,KAAVA,EACC,gBACS,KAAVA,EACC,UACS,QAAVA,EACC,WACS,KAAVA,EACC,YACS,KAAVA,EACC,YACS,KAAVA,EACC,WACS,QAAVA,EACC,UACS,OAAVA,EACC,YACS,QAAVA,EACC,YACS,MAAVA,EACC,oBACS,QAAVA,EACC,aACS,KAAVA,EACC,aACS,QAAVA,EACC,QACS,KAAVA,EACC,YAIX,CAACA,YAML,OAGI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,OAAO,cACT,kBAACD,EAAA,EAAKE,IAAN,KACI,kBAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,GAChB,kBAACC,EAAA,EAAD,CAAOC,UAAU,SAAUC,IAAK,mCAAqChB,EAAYiB,YAAaC,IAAI,kBAGtG,kBAACT,EAAA,EAAKG,OAAN,CAAaC,MAAO,GAAIE,UAAU,cAC9B,yBAAKA,UAAU,eACX,wBAAIA,UAAU,aAAY,kBAAC,IAAD,CAAQI,OAAO,QAAQnB,EAAYoB,gBAEjE,6BACA,wBAAIL,UAAU,eAAef,EAAYqB,OACzC,uBAAGN,UAAU,iBAAiBf,EAAYsB,UAC1C,sCAAW,2BAAItB,EAAYuB,cAA3B,KACA,kBAACC,EAAA,EAAD,KAAQpB,GACR,kBAACqB,EAAA,EAAD,CAAQV,UAAU,gBAAgBW,MAAO1B,EAAY2B,GAAIC,UAAQ,EAACC,KAAK,MAAMC,KAAK,MAAMC,QAASnC,EAAMoC,8BAY/H,OACI,+BACI,+BACKnC,KC1DFoC,EA5BO,SAACrC,GAEnB,IAAMsC,EAAWtC,EAAMsC,SAAS5B,MAAM,EAAG,IAAIP,KAAI,SAACC,EAAaC,GAC3D,OACG,yBAAKc,UAAU,aACX,kBAACD,EAAA,EAAD,CAAOC,UAAU,kBAAkBC,IAAK,mCAAqChB,EAAYiB,cACzF,wBAAIF,UAAU,kBAAkBf,EAAYqB,OAC5C,6BACA,kBAACI,EAAA,EAAD,CAAQV,UAAU,qBAAqBc,KAAK,QAAQH,MAAO1B,EAAY2B,GAAIC,UAAQ,EAACE,KAAK,MAAMC,QAASnC,EAAMoC,2BAQzH,OAII,kBAAClB,EAAA,EAAMqB,MAAP,CAAaN,KAAK,SAEXK,I,SCqBAE,EA1CA,SAACxC,GACZM,QAAQC,IAAIP,EAAMyC,WAClB,IAAMC,EAAe1C,EAAMyC,UAAUtC,KAAI,SAACwC,EAAKtC,GAE3C,OACI,6BACA,kBAACQ,EAAA,EAAD,KACC,kBAACA,EAAA,EAAKG,OAAN,CAAaC,MAAO,GACrB,kBAACC,EAAA,EAAD,CAAOC,UAAU,iBAAkBC,IAAK,kCAAoCuB,EAAIC,KAAKvB,YAAaC,IAAI,iBACtG,kBAACO,EAAA,EAAD,CAAQV,UAAU,oBAAoBc,KAAK,OAAOD,UAAQ,EAACE,KAAK,QAAQC,QAASnC,EAAM6C,gBAAgBC,KAAK,KAAMH,MAGlH,kBAAC9B,EAAA,EAAKG,OAAN,CAAaG,UAAU,aAAaF,MAAO,GAC3C,wBAAIE,UAAU,iBAAiBwB,EAAIC,KAAKnB,OACvC,2BAAG,kBAAC,IAAD,CAAQF,OAAO,QAAQoB,EAAIC,KAAKpB,eACnC,sCAAW,2BAAImB,EAAIC,KAAKjB,iBAIzB,kBAACoB,EAAA,EAAD,UAaR,OACI,6BACCL,I,SCkBMM,EAtDU,WACrB,OACA,6BACI,kBAACC,EAAA,EAAD,CAAaC,OAAK,GACd,kBAACD,EAAA,EAAYE,OAAb,CAAoBC,OAAK,GACzB,kBAACH,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,OAEA,kBAACJ,EAAA,EAAYK,UAAb,KACA,kBAACL,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,QAGJ,kBAACJ,EAAA,EAAD,CAAaC,OAAK,GAClB,kBAACD,EAAA,EAAYE,OAAb,CAAoBC,OAAK,GACzB,kBAACH,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,OAEA,kBAACJ,EAAA,EAAYK,UAAb,KACA,kBAACL,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,QAGQ,kBAACJ,EAAA,EAAD,CAAaC,OAAK,GAClB,kBAACD,EAAA,EAAYE,OAAb,CAAoBC,OAAK,GACzB,kBAACH,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,OAEA,kBAACJ,EAAA,EAAYK,UAAb,KACA,kBAACL,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,QAGJ,kBAACJ,EAAA,EAAD,CAAaC,OAAK,GAClB,kBAACD,EAAA,EAAYE,OAAb,CAAoBC,OAAK,GACzB,kBAACH,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,OAEA,kBAACJ,EAAA,EAAYK,UAAb,KACA,kBAACL,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,MACA,kBAACJ,EAAA,EAAYI,KAAb,U,0BC+GGE,E,YAjJb,WAAYvD,GAAQ,IAAD,8BACjB,4CAAMA,KAmBRwD,qBAAuB,SAACC,GACtB,IAAMC,EAAaD,EAAEE,OAAO7B,MAC5B,EAAK8B,cAAcF,IAtBF,EAuDnBtB,oBAvDmB,uCAuDG,WAAOqB,GAAP,SAAAI,EAAA,6DACpBJ,EAAEK,iBACFxD,QAAQC,IAAIkD,EAAEM,cAAcjC,OAFR,SAGVkC,IAAMC,IAAN,6CAAgDR,EAAEM,cAAcjC,MAAhE,6DACPoC,MAAK,SAAAC,GAEF7D,QAAQC,IAAI4D,EAAUvB,MACpB,EAAKwB,SAAS,CACZ3B,UAAU,GAAD,mBAAM,EAAK4B,MAAM5B,WAAjB,CAA4B0B,IACrCG,oBAAoB,OATV,2CAvDH,wDAqEnBC,yBArEmB,uCAqEQ,WAAO5B,EAAKc,GAAZ,SAAAI,EAAA,sDACzBvD,QAAQC,IAAI,SAAUoC,GACtB,EAAKyB,SAAS,CACZ3B,UAAW,EAAK4B,MAAM5B,UAAU+B,QAAO,SAACtE,GAAD,OAAWA,IAAUyC,OAHrC,2CArER,wDAEjB,EAAK0B,MAAQ,CACXI,SAAS,EACTC,sBAAsB,EACtBC,UAAW,GACXC,aAAc,GACdnC,UAAW,GACX6B,oBAAoB,EACpBO,aAAa,GAGf,EAAKjB,cAAgB,EAAKA,cAAcd,KAAnB,gBAErB,EAAKgC,gBACL,EAAKlB,gBAfY,E,2EA0BLF,GAAa,IAAD,OACxBM,IAAMC,IAAI,sIAAwIP,GACjJQ,MAAK,SAAAa,GACF,IAAMC,EAAUD,EAChB,EAAKX,SAAS,CACZO,UAAWK,EAAQpC,KAAKoC,QACxBP,SAAS,EACTI,aAAa,OAGlBI,OAAO,SAAAC,GACJ5E,QAAQC,IAAI2E,Q,sCAID,IAAD,OACdlB,IAAMC,IAAI,4FACTC,MAAK,SAAAiB,GACF,IAAMC,EAAWD,EACjB,EAAKf,SAAS,CACZQ,aAAcQ,EAASxC,KAAKoC,QAC5BN,sBAAsB,OAG3BO,OAAO,SAAAC,GACJ5E,QAAQC,IAAI2E,Q,+BA+BhB,OACE,6BAEE,2BAAO/D,UAAU,aACf,+BACE,4BACE,4BACE,yBAAKA,UAAU,OAAOG,IAAI,UAAUF,IAAI,cAE1C,gCASN,yBAAKD,UAAU,OAIf,kBAACP,EAAA,EAAD,CAASO,UAAU,gBACjB,kBAACkE,EAAA,EAAD,CAAOnD,KAAK,SAASf,UAAU,0BAA0BmE,YAAY,YAAYC,SAAUC,KAAKhC,uBAE9F,kBAAC3C,EAAA,EAAD,CAAM4E,WAAS,EAACC,QAAS,GACvB,kBAAC7E,EAAA,EAAKE,IAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,GACpB,yBAAKE,UAAU,SACX,kBAACS,EAAA,EAAD,CAAOK,KAAK,cAAc0D,MAAM,SAASxE,UAAU,+BAAnD,YAECqE,KAAKnB,MAAMI,QAAU,KAAO,kBAAC,EAAD,CAAQhC,UAAW+C,KAAKnB,MAAM5B,UAAWI,gBAAiB2C,KAAKjB,4BAGhG,kBAAC1D,EAAA,EAAKG,OAAN,CAAaC,MAAO,KACM,IAAvBuE,KAAKnB,MAAMI,QAAmB,kBAAC,EAAD,MAAsB,kBAAC,EAAD,CAAUvE,MAAOsF,KAAKnB,MAAMM,UAAWvC,oBAAqBoD,KAAKpD,uBAExH,kBAACvB,EAAA,EAAKG,OAAN,CAAaC,MAAO,GAEpB,yBAAKE,UAAU,SACd,kBAACS,EAAA,EAAD,CAAOK,KAAK,QAAQ0D,MAAM,SAAUxE,UAAU,+BAA9C,aAEIqE,KAAKnB,MAAMI,QAAU,KAAO,kBAAC,EAAD,CAAenC,SAAUkD,KAAKnB,MAAMO,aAAcxC,oBAAqBoD,KAAKpD,gC,GA7H3GwD,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.71d50e06.chunk.js","sourcesContent":["import React from 'react';\nimport { Divider, Segment, Grid, Icon, Image, Label, Button } from 'semantic-ui-react'\nimport Moment from 'react-moment';\n\nconst MovieRow = (props) => {   \n    const movies = props.movie.map((pickedMovie, i) => {\n        console.log(props.movie)\n\n        const genres = pickedMovie.genre_ids.slice(0, 2).map((genre, i) => {\n            if(genre === 28) {\n                return  \"Action  \"\n            } else if(genre === 12) {\n                return \"Adventure  \"\n            } else if(genre === 16) {\n                return \"Animation  \"\n            } else if(genre === 35) {\n                return \"Comedy  \"\n            } else if(genre === 80) {\n                return \"Crime  \"\n            } else if(genre === 99) {\n                return \"Documentary  \"\n            } else if(genre === 18) {\n                return \"Drama  \"\n            } else if(genre === 10751) {\n                return \"Family  \"\n            } else if(genre === 14) {\n                return \"Fantasy  \"\n            } else if(genre === 36) {\n                return \"History  \"\n            } else if(genre === 27) {\n                return \"Horror  \"\n            } else if(genre === 10402) {\n                return \"Music  \"\n            } else if(genre === 9648) {\n                return \"Mystery  \"\n            } else if(genre === 10749) {\n                return \"Romance  \"\n            } else if(genre === 878) {\n                return \"Science Fiction  \"\n            } else if(genre === 10770) {\n                return \"TV Movie  \"\n            } else if(genre === 53) {\n                return \"Thriller  \"\n            } else if(genre === 10752) {\n                return \"War  \"\n            } else if(genre === 37) {\n                return \"Western  \"\n            } \n           \n            return (\n            {genre}\n                \n            )\n        })\n\n\n        return( \n\n            \n            <Segment >\n                <Grid celled='internally'>\n                    <Grid.Row>\n                        <Grid.Column width={5}>\n                            <Image className=\"poster\"  src={\"https://image.tmdb.org/t/p/w400/\" + pickedMovie.poster_path} alt=\"Movie Poster\" />\n                            \n                        </Grid.Column>\n                        <Grid.Column width={11} className=\"align-left\">\n                            <div className=\"float-right\">\n                                <h4 className=\"dateFloat\"><Moment format=\"YYYY\">{pickedMovie.release_date}</Moment></h4>\n                            </div>\n                            <div>\n                            <h2 className=\"movie-title\">{pickedMovie.title}</h2>\n                            <p className=\"overview-text\">{pickedMovie.overview}</p>\n                            <p>Rating: <b>{pickedMovie.vote_average}</b> </p>\n                            <Label>{genres}</Label>\n                            <Button className=\"add-btn hover\" value={pickedMovie.id} circular size='big' icon='add' onClick={props.addMovieToFavorites}/>\n\n                            \n                            </div>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n       \n        )\n    })\n \n    return (\n        <table>\n            <tbody>\n                {movies}\n            </tbody>\n        </table>\n    )\n}\n\nexport default MovieRow\n\n","import React from 'react';\nimport { Divider, Segment, Grid, Icon, Image, Label, Card, Button } from 'semantic-ui-react'\n\n\nconst TopMovieCards = (props) => {   \n    // console.log(props.topMovie, \"< TOP MOVEI CARDS\")\n    const topMovie = props.topMovie.slice(0, 10).map((pickedMovie, i) => {\n        return( \n           <div className='container'>\n               <Image className=\"top-movie-cards\" src={\"https://image.tmdb.org/t/p/w200/\" + pickedMovie.poster_path}/>\n               <h3 className=\"top-movie-text\">{pickedMovie.title}</h3>\n               <div>\n               <Button className=\"add-btn-card hover\" size=\"large\" value={pickedMovie.id} circular icon='add' onClick={props.addMovieToFavorites}/>\n\n               </div>\n           </div>\n        )\n    })\n\n \n    return (\n        // <div>\n        //     {topMovie}\n        // </div>\n        <Image.Group size='small'>\n            \n              {topMovie}\n            \n        </Image.Group>\n    )\n}\n\nexport default TopMovieCards","import React from 'react';\nimport Moment from 'react-moment';\nimport { Divider, Segment, Grid, Icon, Image, Label, Card, Button } from 'semantic-ui-react'\n\n\nconst MyList = (props) => {   \n    console.log(props.favorites)\n    const favoriteList = props.favorites.map((fav, i) => {\n   \n        return (\n            <div>\n            <Grid>\n             <Grid.Column width={8}>\n            <Image className=\"my-list-poster\"  src={\"https://image.tmdb.org/t/p/w300\" + fav.data.poster_path} alt=\"Movie Poster\" />\n            <Button className=\"hover my-list-btn\" size=\"mini\" circular icon='minus' onClick={props.removeFavorites.bind(null, fav)}/>\n\n            </Grid.Column>\n            <Grid.Column className=\"align-left\" width={8}>\n            <h5 className=\"my-list-title\">{fav.data.title}</h5>\n             <p><Moment format=\"YYYY\">{fav.data.release_date}</Moment></p>\n             <p>Rating: <b>{fav.data.vote_average}</b></p>\n    \n            </Grid.Column>\n            </Grid>\n            <Divider />\n            </div>\n       \n        )\n    })\n \n    \n\n             \n\n\n\n \n    return (\n        <div>\n        {favoriteList}\n        </div>\n         \n         \n\n    )\n}\n\nexport default MyList;","import React from 'react'\nimport { Placeholder } from 'semantic-ui-react'\n\nconst MoviePlaceholder = () => {\n    return (\n    <div>\n        <Placeholder fluid>\n            <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n            </Placeholder.Header>\n            <Placeholder.Paragraph>\n            <Placeholder.Line />\n            <Placeholder.Line />\n            <Placeholder.Line />\n            </Placeholder.Paragraph>\n        </Placeholder>\n        <Placeholder fluid>\n        <Placeholder.Header image>\n        <Placeholder.Line />\n        <Placeholder.Line />\n        </Placeholder.Header>\n        <Placeholder.Paragraph>\n        <Placeholder.Line />\n        <Placeholder.Line />\n        <Placeholder.Line />\n        </Placeholder.Paragraph>\n                </Placeholder>\n                <Placeholder fluid>\n                <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n                </Placeholder.Header>\n                <Placeholder.Paragraph>\n                <Placeholder.Line />\n                <Placeholder.Line />\n                <Placeholder.Line />\n                </Placeholder.Paragraph>\n            </Placeholder>\n            <Placeholder fluid>\n            <Placeholder.Header image>\n            <Placeholder.Line />\n            <Placeholder.Line />\n            </Placeholder.Header>\n            <Placeholder.Paragraph>\n            <Placeholder.Line />\n            <Placeholder.Line />\n            <Placeholder.Line />\n            </Placeholder.Paragraph>\n        </Placeholder>\n        </div>\n\n       \n    )\n \n}\n\nexport default MoviePlaceholder","import React, { Component } from 'react';\nimport './App.css';\nimport MovieRow from './Components/MovieRow'\nimport TopMovieData from './Components/TopMovieData'\nimport TopMovieCards from './Components/TopMovieCards'\nimport MyList from './Components/MyList'\nimport Welcome from './Components/Welcome'\nimport MoviePlaceholder from './Components/MoviePlaceholder'\nimport Axios from 'axios';\nimport { Grid, Segment, Input, Label,Placeholder } from 'semantic-ui-react';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: true,\n      toppMovieDataLoading: true,\n      movieData: [],\n      topMovieData: [],\n      favorites: [],\n      MyListMovieLoading: true,\n      searchFired: false\n    }\n\n    this.performSearch = this.performSearch.bind(this)\n\n    this.findTopMovies();\n    this.performSearch();\n\n    \n  }\n\n  searchChangeHandeler = (e) => {\n    const searchTerm = e.target.value\n    this.performSearch(searchTerm)\n  }\n\n  \n  performSearch(searchTerm) {\n    Axios.get('https://api.themoviedb.org/3/search/movie?api_key=5e9bd2fa585826bdfc4233fb6424f425&language=en-US&page=1&include_adult=false&query=' + searchTerm)\n    .then(response => {\n        const results = response;\n        this.setState({\n          movieData: results.data.results,\n          loading: false,\n          searchFired: true\n        })    \n  })\n    .catch (error => {\n        console.log(error);\n    });\n  }\n\n  findTopMovies() {\n    Axios.get('https://api.themoviedb.org/3/trending/movie/day?api_key=5e9bd2fa585826bdfc4233fb6424f425')\n    .then(response2 => {\n        const results2 = response2;\n        this.setState({\n          topMovieData: results2.data.results,\n          toppMovieDataLoading: false\n        })    \n  })\n    .catch (error => {\n        console.log(error);\n    });\n  }\n\n  addMovieToFavorites = async (e) => {\n    e.preventDefault();\n    console.log(e.currentTarget.value)\n        await Axios.get(`https://api.themoviedb.org/3/movie/${e.currentTarget.value}?api_key=5e9bd2fa585826bdfc4233fb6424f425&language=en-US`)\n      .then(response3 => {\n          const results3 = response3;\n          console.log(response3.data)\n            this.setState({\n              favorites: [...this.state.favorites, response3],\n              MyListMovieLoading: false\n            })\n      })\n  }\n\n  removeMovieFromFavorites = async (fav, e) => {\n    console.log(\"delete\", fav)\n    this.setState({\n      favorites: this.state.favorites.filter((movie) => movie !== fav)\n    })\n  }\n\n  \n\n\n\n\n  render() {\n    return (\n      <div>\n        \n        <table className=\"title-bar\">\n          <tbody>\n            <tr>\n              <td>\n                <img className=\"logo\" alt=\"yourmom\" src=\"logo.png\"/>\n              </td>\n              <td>\n                \n              </td>\n            </tr>\n          </tbody>\n        </table>\n   \n       \n\n        <div className=\"App\">\n        {/* <Welcome /> */}\n       \n    \n        <Segment className=\"segment-main\">\n          <Input icon='search' className=\"searchinput align-left \" placeholder='Search...' onChange={this.searchChangeHandeler}/>\n            \n            <Grid stackable columns={2}>\n              <Grid.Row>\n                <Grid.Column width={3}>\n                <div className=\"label\"> \n                    <Label size=\"large label\" color='orange' className=\"hover label mylist-trending\">MY LIST</Label>\n                    </div>\n                    {this.state.loading ? null : <MyList favorites={this.state.favorites} removeFavorites={this.removeMovieFromFavorites}/>}\n\n                </Grid.Column>\n                <Grid.Column width={10}>\n                  {this.state.loading === true ? <MoviePlaceholder/> : <MovieRow movie={this.state.movieData} addMovieToFavorites={this.addMovieToFavorites}/>}\n                </Grid.Column>\n                <Grid.Column width={3}>\n\n                <div className=\"label\"> \n                 <Label size=\"large\" color='orange'  className=\"hover label mylist-trending\">TRENDING</Label>\n                 </div>\n                    {this.state.loading ? null : <TopMovieCards topMovie={this.state.topMovieData} addMovieToFavorites={this.addMovieToFavorites}/>}\n\n                  \n\n                </Grid.Column>\n              </Grid.Row>\n            </Grid> \n\n            \n            </Segment>\n            \n        </div> \n\n\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}